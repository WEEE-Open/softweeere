{"version":3,"sources":["utils.js","components/Header.js","components/mainview/KatacodaCard.js","components/mainview/KatacodaEmbed.js","components/MainView.js","App.js","serviceWorker.js","index.js"],"names":["embedTypes","buttonTexts","Header","props","Navbar","expand","className","Container","Brand","href","src","height","alt","KatacodaCard","num","embed","buttonHandler","useState","buttonText","setButtonText","Card","id","border","Img","type","title","variant","Body","Title","Text","description","Button","onClick","Footer","github","KatacodaEmbed","color","style","visibility","isActive","display","data-katacoda-id","katacoda","data-katacoda-color","paddingTop","MainView","embeds","CardColumns","map","idx","key","App","setEmbeds","prevState","e","newE","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1a1570d3.chunk.js","sourcesContent":["export const embedTypes = {\n    'python': \"Python\",\n    'php': \"PHP\",\n};\n\nexport const buttonTexts = {\n    'toPress': \"Try this repo!\",\n    'pressed': \"Close the terminal\",\n}\n","// this component is called Header to prevent collisions with react-bootstrap's Navbar component\n\nimport React from \"react\";\nimport {Navbar, Container} from \"react-bootstrap\";\n\nconst Header = props => {\n    return(\n        <Navbar\n        expand={\"sm\"}\n        className={\"top\"}>\n            <Container>\n                <Navbar.Brand\n                href={\"/\"}>\n                    <img\n                        src={\"weee.png\"}\n                        height={69}\n                        className={\"img-fluid\"}\n                        alt={\"WEEE Open\"}\n                    />\n                </Navbar.Brand>\n            </Container>\n        </Navbar>\n    );\n}\n\nexport default Header;","import React, {useState} from \"react\";\nimport {Button, Card} from \"react-bootstrap\";\nimport {buttonTexts} from \"../../utils\";\n\nconst KatacodaCard = props => {\n    const {num, embed, buttonHandler} = props;\n    const [buttonText, setButtonText] = useState(buttonTexts.toPress);\n\n    const toggleButton = () => {\n        setButtonText(buttonText === buttonTexts.toPress ? buttonTexts.pressed : buttonTexts.toPress);\n        buttonHandler(embed);\n    }\n\n    return (\n        <Card id={`card-${num}`}\n            border={\"success\"}\n        >\n            <Card.Img\n                src={`${embed.type}.svg`}\n                alt={embed.title}\n                variant={\"top\"}\n            />\n            <Card.Body>\n                <Card.Title>{embed.title}</Card.Title>\n                <Card.Text>{embed.description}</Card.Text>\n                <Button\n                    variant={\"success\"}\n                    onClick={toggleButton}\n                >\n                    {buttonText}\n                </Button>\n            </Card.Body>\n            <Card.Footer>\n                <a href={`https://github.com/${embed.github}`}>GitHub page</a>\n            </Card.Footer>\n        </Card>\n    );\n}\n\nexport default KatacodaCard;","import React from \"react\";\n\nconst KatacodaEmbed = props => {\n    const {num, embed, color} = props;\n\n    return (\n        <div\n            id={`embed-${num}`}\n            className={\"pt-3\"}\n            style={{\n                // use this instead of ReactJS conditional rendering\n                // because otherwise Katacoda doesn't contact the backend\n                visibility: embed.isActive ? \"visible\": \"hidden\",\n                display: embed.isActive ? \"initial\" : \"none\",\n            }}\n        >\n            <hr/>\n            <h3>{embed.title}</h3>\n            <div id={`katacoda-scenario-${num}`}\n                data-katacoda-id={embed.katacoda}\n                data-katacoda-color={color}\n                style={{\n                    height: \"600px\",\n                    paddingTop: \"20px\",\n                }}\n            />\n        </div>\n    );\n}\n\nexport default KatacodaEmbed;","import React from \"react\";\nimport {CardColumns, Container} from \"react-bootstrap\";\nimport KatacodaCard from \"./mainview/KatacodaCard\";\nimport KatacodaEmbed from \"./mainview/KatacodaEmbed\";\n\nconst MainView = props => {\n    const {embeds, buttonHandler, color} = props;\n\n    return (\n        <Container id={\"MainView\"}>\n            {embeds ?\n                <div id={\"Embeds\"}>\n                    <h1>Try our software here!</h1>\n                    <CardColumns className={\"pt-3\"}>\n                        {embeds.map((embed, idx) =>\n                            <KatacodaCard\n                            key={idx}\n                            num={idx}\n                            embed={embed}\n                            buttonHandler={buttonHandler}\n                            />)}\n                    </CardColumns>\n                    {embeds\n                    .map((embed, idx) =>\n                        <KatacodaEmbed\n                            key={idx}\n                            num={idx}\n                            embed={embed}\n                            color={color}\n                        />)}\n                </div> :\n                <div id={\"NoEmbeds\"}>\n                    <h1>No embeds added to the website. Maybe there's a configuration error?</h1>\n                </div>\n            }\n        </Container>\n    );\n}\n\nexport default MainView;","import React, {useState} from 'react';\nimport './App.css';\nimport {embedTypes} from \"./utils\";\nimport Header from \"./components/Header\";\nimport MainView from \"./components/MainView\";\n\nconst App = () => {\n\n    // state variables\n    const [embeds, setEmbeds] = useState([\n        {\n            'type': embedTypes.python,\n            'title': '🐟 S.A.R.D.I.N.A.',\n            'description': 'Statistiche Amabili Rendimento Degli Informatici Nell’Anno',\n            'katacoda': 'e-caste/weee-open-sardina',\n            'github': 'weee-open/sardina',\n            'isActive': false,\n        },\n        {\n            'type': embedTypes.php,\n            'title': '✅ WEEEhire-ng',\n            'description': 'Manage applications to the team',\n            'katacoda': 'e-caste/weee-open-weeehire-ng',\n            'github': 'weee-open/weeehire-ng',\n            'isActive': false,\n        },\n        {\n            'type': embedTypes.python,\n            'title': '🍐 P.E.R.A.C.O.T.T.A.',\n            'description': 'Progetto Esteso Raccolta Automatica Configurazioni hardware Organizzate Tramite Tarallo Autonomamente',\n            'katacoda': 'e-caste/weee-open-peracotta',\n            'github': 'weee-open/peracotta',\n            'isActive': false,\n        }\n    ]);\n    const [color, setColor] = useState(\"00983a\");\n\n    const buttonHandler = embed => setEmbeds(prevState => {\n        return prevState.map(e => {\n            if (e.github === embed.github) {\n                let newE = {...e};  // CRUCIAL STEP\n                newE.isActive = !newE.isActive;\n                return newE;\n            } else return e;\n        });\n    });\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <MainView\n                embeds={embeds}\n                buttonHandler={buttonHandler}\n                color={color}\n            />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}