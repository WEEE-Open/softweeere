{"version":3,"sources":["components/Header.js","components/mainview/KatacodaEmbed.js","components/MainView.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","Navbar","expand","className","Container","Brand","href","src","height","alt","KatacodaEmbed","num","embed","color","id","title","github","data-katacoda-id","katacoda","data-katacoda-color","style","paddingTop","MainView","embeds","map","idx","key","App","useState","setEmbeds","useEffect","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0QAyBeA,EApBA,SAAAC,GACX,OACI,kBAACC,EAAA,EAAD,CACAC,OAAQ,KACRC,UAAW,OACP,kBAACC,EAAA,EAAD,KACI,kBAACH,EAAA,EAAOI,MAAR,CACAC,KAAM,KACF,yBACIC,IAAK,WACLC,OAAQ,GACRL,UAAW,YACXM,IAAK,kBCGdC,EAlBO,SAAAV,GAAU,IACrBW,EAAqBX,EAArBW,IAAKC,EAAgBZ,EAAhBY,MAAOC,EAASb,EAATa,MAEnB,OACI,yBAAKC,GAAE,gBAAWH,GAAOR,UAAW,QAChC,4BAAKS,EAAMG,OACX,6BACA,oDAAyB,uBAAGT,KAAI,6BAAwBM,EAAMI,SAArC,gBACzB,yBAAKF,GAAE,4BAAuBH,GAC1BM,mBAAkBL,EAAMM,SACxBC,sBAAqBN,EACrBO,MAAO,CAACZ,OAAQ,QAASa,WAAY,UAEzC,+BCOGC,EAlBE,SAAAtB,GAGb,OACI,kBAACI,EAAA,EAAD,CAAWU,GAAI,YACVd,EAAMuB,OACH,yBAAKT,GAAI,UACL,sDACCd,EAAMuB,OAAOC,KAAI,SAACZ,EAAOa,GAAR,OAAgB,kBAAC,EAAD,CAAeC,IAAKD,EAAKd,IAAKc,EAAKb,MAAOA,EAAOC,MAPrF,eASF,yBAAKC,GAAI,YACL,uGC2BLa,EArCH,WAAM,MAGcC,mBAAS,IAHvB,mBAGPL,EAHO,KAGCM,EAHD,KA6Bd,OAvBAC,qBAAU,WACND,EAAU,CACN,CACI,KAAQ,SACR,MAAS,8BACT,SAAY,4BACZ,OAAU,qBAEd,CACI,KAAQ,MACR,MAAS,qBACT,SAAY,gCACZ,OAAU,yBAEd,CACI,KAAQ,SACR,MAAS,kCACT,SAAY,8BACZ,OAAU,2BAGnB,IAGC,yBAAK1B,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUoB,OAAQA,MCzBVQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ddf1bc80.chunk.js","sourcesContent":["// this component is called Header to prevent collisions with react-bootstrap's Navbar component\n\nimport React from \"react\";\nimport {Navbar, Container} from \"react-bootstrap\";\n\nconst Header = props => {\n    return(\n        <Navbar\n        expand={\"sm\"}\n        className={\"top\"}>\n            <Container>\n                <Navbar.Brand\n                href={\"/\"}>\n                    <img\n                        src={\"weee.png\"}\n                        height={69}\n                        className={\"img-fluid\"}\n                        alt={\"WEEE Open\"}\n                    />\n                </Navbar.Brand>\n            </Container>\n        </Navbar>\n    );\n}\n\nexport default Header;","import React from \"react\";\n\nconst KatacodaEmbed = props => {\n    const {num, embed, color} = props;\n\n    return (\n        <div id={`embed-${num}`} className={\"pt-3\"}>\n            <h3>{embed.title}</h3>\n            <hr/>\n            <p>Find more info on the <a href={`https://github.com/${embed.github}`}>GitHub page</a></p>\n            <div id={`katacoda-scenario-${num}`}\n                data-katacoda-id={embed.katacoda}\n                data-katacoda-color={color}\n                style={{height: \"600px\", paddingTop: \"20px\"}}\n            />\n            <hr/>\n        </div>\n    );\n}\n\nexport default KatacodaEmbed;","import React from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport KatacodaEmbed from \"./mainview/KatacodaEmbed\";\n\nconst MainView = props => {\n    const color = \"00983a\";\n\n    return (\n        <Container id={\"MainView\"}>\n            {props.embeds ?\n                <div id={\"Embeds\"}>\n                    <h1>Try our software here!</h1>\n                    {props.embeds.map((embed, idx) => <KatacodaEmbed key={idx} num={idx} embed={embed} color={color} />)}\n                </div> :\n                <div id={\"NoEmbeds\"}>\n                    <h1>No embeds added to the website. Maybe there's a configuration error?</h1>\n                </div>\n            }\n        </Container>\n    );\n}\n\nexport default MainView;","import React, {useState, useEffect} from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport MainView from \"./components/MainView\";\n\nconst App = () => {\n\n    // state variables\n    const [embeds, setEmbeds] = useState([]);\n\n    // componentDidMount\n    useEffect(() => {\n        setEmbeds([\n            {\n                'type': 'python',\n                'title': 'üêü S.A.R.D.I.N.A.',\n                'katacoda': 'e-caste/weee-open-sardina',\n                'github': 'weee-open/sardina',\n            },\n            {\n                'type': 'php',\n                'title': '‚úÖ WEEEhire-ng',\n                'katacoda': 'e-caste/weee-open-weeehire-ng',\n                'github': 'weee-open/weeehire-ng',\n            },\n            {\n                'type': 'python',\n                'title': 'üçê P.E.R.A.C.O.T.T.A.',\n                'katacoda': 'e-caste/weee-open-peracotta',\n                'github': 'weee-open/peracotta',\n            }\n        ]);\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <Header />\n            <MainView embeds={embeds} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}